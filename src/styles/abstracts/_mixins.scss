// Sass mixins

// Media query mixins for responsive design
@mixin respond-to($breakpoint) {
  @if $breakpoint == xs {
    @media (min-width: $breakpoint-xs) {
      @content;
    }
  } @else if $breakpoint == sm {
    @media (min-width: $breakpoint-sm) {
      @content;
    }
  } @else if $breakpoint == md {
    @media (min-width: $breakpoint-md) {
      @content;
    }
  } @else if $breakpoint == lg {
    @media (min-width: $breakpoint-lg) {
      @content;
    }
  } @else if $breakpoint == xl {
    @media (min-width: $breakpoint-xl) {
      @content;
    }
  } @else if $breakpoint == 2xl {
    @media (min-width: $breakpoint-2xl) {
      @content;
    }
  }
}

// Maximum width media queries
@mixin respond-to-max($breakpoint) {
  @if $breakpoint == xs {
    @media (max-width: calc(#{$breakpoint-xs} - 1px)) {
      @content;
    }
  } @else if $breakpoint == sm {
    @media (max-width: calc(#{$breakpoint-sm} - 1px)) {
      @content;
    }
  } @else if $breakpoint == md {
    @media (max-width: calc(#{$breakpoint-md} - 1px)) {
      @content;
    }
  } @else if $breakpoint == lg {
    @media (max-width: calc(#{$breakpoint-lg} - 1px)) {
      @content;
    }
  } @else if $breakpoint == xl {
    @media (max-width: calc(#{$breakpoint-xl} - 1px)) {
      @content;
    }
  } @else if $breakpoint == 2xl {
    @media (max-width: calc(#{$breakpoint-2xl} - 1px)) {
      @content;
    }
  }
}

// Between breakpoints
@mixin respond-between($min-breakpoint, $max-breakpoint) {
  $min-width: null;
  $max-width: null;
  
  @if $min-breakpoint == xs {
    $min-width: $breakpoint-xs;
  } @else if $min-breakpoint == sm {
    $min-width: $breakpoint-sm;
  } @else if $min-breakpoint == md {
    $min-width: $breakpoint-md;
  } @else if $min-breakpoint == lg {
    $min-width: $breakpoint-lg;
  } @else if $min-breakpoint == xl {
    $min-width: $breakpoint-xl;
  }
  
  @if $max-breakpoint == sm {
    $max-width: calc(#{$breakpoint-sm} - 1px);
  } @else if $max-breakpoint == md {
    $max-width: calc(#{$breakpoint-md} - 1px);
  } @else if $max-breakpoint == lg {
    $max-width: calc(#{$breakpoint-lg} - 1px);
  } @else if $max-breakpoint == xl {
    $max-width: calc(#{$breakpoint-xl} - 1px);
  } @else if $max-breakpoint == 2xl {
    $max-width: calc(#{$breakpoint-2xl} - 1px);
  }
  
  @media (min-width: $min-width) and (max-width: $max-width) {
    @content;
  }
}

// Flexbox utilities
@mixin flex-center {
  display: flex;
  align-items: center;
  justify-content: center;
}

@mixin flex-between {
  display: flex;
  align-items: center;
  justify-content: space-between;
}

@mixin flex-column {
  display: flex;
  flex-direction: column;
}

// Button mixins
@mixin button-base {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  border: none;
  border-radius: $border-radius-md;
  font-weight: $font-weight-medium;
  text-decoration: none;
  cursor: pointer;
  transition: all $transition-base ease;
  font-family: $font-primary;
  
  &:focus {
    outline: 2px solid $color-primary;
    outline-offset: 2px;
  }
  
  &:disabled {
    opacity: 0.6;
    cursor: not-allowed;
  }
}

@mixin button-size($padding-y, $padding-x, $font-size) {
  padding: $padding-y $padding-x;
  font-size: $font-size;
}

@mixin button-variant($bg-color, $text-color, $hover-bg: null, $hover-text: null) {
  background-color: $bg-color;
  color: $text-color;
  
  @if $hover-bg {
    &:hover:not(:disabled) {
      background-color: $hover-bg;
      @if $hover-text {
        color: $hover-text;
      }
    }
  } @else {
    &:hover:not(:disabled) {
      opacity: 0.9;
    }
  }
}

// Typography mixins
@mixin heading($size: 'lg') {
  font-family: $font-primary;
  font-weight: $font-weight-bold;
  line-height: $line-height-tight;
  color: $color-gray-900;
  
  @if $size == 'xs' {
    font-size: $font-size-lg;
  } @else if $size == 'sm' {
    font-size: $font-size-xl;
  } @else if $size == 'md' {
    font-size: $font-size-2xl;
  } @else if $size == 'lg' {
    font-size: $font-size-3xl;
  } @else if $size == 'xl' {
    font-size: $font-size-4xl;
  } @else if $size == '2xl' {
    font-size: $font-size-5xl;
  } @else if $size == '3xl' {
    font-size: $font-size-6xl;
  }
}

@mixin text-truncate {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

@mixin text-clamp($lines: 2) {
  display: -webkit-box;
  -webkit-line-clamp: $lines;
  -webkit-box-orient: vertical;
  overflow: hidden;
}

// Container mixin
@mixin container($max-width: $breakpoint-xl) {
  width: 100%;
  max-width: $max-width;
  margin: 0 auto;
  padding: 0 $spacing-4;
  
  @include respond-to(sm) {
    padding: 0 $spacing-6;
  }
  
  @include respond-to(lg) {
    padding: 0 $spacing-8;
  }
}

// Card mixin
@mixin card($padding: $spacing-6) {
  background: $color-white;
  border-radius: $border-radius-lg;
  box-shadow: $shadow-base;
  padding: $padding;
}

// Absolute positioning
@mixin absolute-center {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}

// Gradient mixins
@mixin gradient-blue {
  background: linear-gradient(135deg, $color-primary-light 0%, $color-primary-dark 100%);
}

@mixin gradient-overlay($opacity: 0.5) {
  position: relative;
  
  &::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba($color-black, $opacity);
  }
}
