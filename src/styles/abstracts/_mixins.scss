// =============================================================================
// MIXINS
// =============================================================================
// Reusable SCSS mixins for responsive design, utilities, and common patterns
// =============================================================================

// =============================================================================
// RESPONSIVE BREAKPOINTS
// =============================================================================
// Mixins for responsive design using the defined breakpoints
// =============================================================================

// Respond above a breakpoint
@mixin respond-above($breakpoint) {
  @if map-has-key($breakpoints, $breakpoint) {
    @media (min-width: map-get($breakpoints, $breakpoint)) {
      @content;
    }
  } @else {
    @warn "#{$breakpoint} is not a valid breakpoint. Available breakpoints: #{map-keys($breakpoints)}";
  }
}

// Respond below a breakpoint
@mixin respond-below($breakpoint) {
  @if map-has-key($breakpoints, $breakpoint) {
    @media (max-width: map-get($breakpoints, $breakpoint) - 1px) {
      @content;
    }
  } @else {
    @warn "#{$breakpoint} is not a valid breakpoint. Available breakpoints: #{map-keys($breakpoints)}";
  }
}

// Respond between two breakpoints
@mixin respond-between($min, $max) {
  @if map-has-key($breakpoints, $min) and map-has-key($breakpoints, $max) {
    @media (min-width: map-get($breakpoints, $min)) and (max-width: map-get($breakpoints, $max) - 1px) {
      @content;
    }
  } @else {
    @warn "Invalid breakpoints. Available breakpoints: #{map-keys($breakpoints)}";
  }
}

// =============================================================================
// MOBILE-FIRST RESPONSIVE MIXINS
// =============================================================================

// Mobile Small (320px and up)
@mixin mobile-s {
  @include respond-above('mobile-s') {
    @content;
  }
}

// Mobile Medium (375px and up)
@mixin mobile-m {
  @include respond-above('mobile-m') {
    @content;
  }
}

// Mobile Large (425px and up)
@mixin mobile-l {
  @include respond-above('mobile-l') {
    @content;
  }
}

// Tablet (768px and up)
@mixin tablet {
  @include respond-above('tablet') {
    @content;
  }
}

// Laptop (1024px and up)
@mixin laptop {
  @include respond-above('laptop') {
    @content;
  }
}

// Laptop Large (1440px and up)
@mixin laptop-l {
  @include respond-above('laptop-l') {
    @content;
  }
}

// 4K (2560px and up)
@mixin desktop-4k {
  @include respond-above('4k') {
    @content;
  }
}

// =============================================================================
// UTILITY MIXINS
// =============================================================================

// Clearfix
@mixin clearfix {
  &::after {
    content: '';
    display: table;
    clear: both;
  }
}

// Center content horizontally and vertically
@mixin center {
  display: flex;
  align-items: center;
  justify-content: center;
}

// Center horizontally
@mixin center-horizontal {
  display: flex;
  justify-content: center;
}

// Center vertically
@mixin center-vertical {
  display: flex;
  align-items: center;
}

// Absolute center (position absolute)
@mixin absolute-center {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}

// Full size (width and height 100%)
@mixin full-size {
  width: 100%;
  height: 100%;
}

// Aspect ratio
@mixin aspect-ratio($width, $height) {
  position: relative;

  &::before {
    content: '';
    display: block;
    padding-bottom: ($height / $width) * 100%;
  }

  > * {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
  }
}

// =============================================================================
// TYPOGRAPHY MIXINS
// =============================================================================

// Fluid typography
@mixin fluid-text($min-size, $max-size, $min-viewport: 320px, $max-viewport: 1200px) {
  font-size: clamp(#{$min-size}, calc(#{$min-size} + (#{$max-size} - #{$min-size}) * ((100vw - #{$min-viewport}) / (#{$max-viewport} - #{$min-viewport}))), #{$max-size});
}

// Line clamp (truncate text to specific number of lines)
@mixin line-clamp($lines: 1) {
  display: -webkit-box;
  -webkit-line-clamp: $lines;
  -webkit-box-orient: vertical;
  overflow: hidden;
}

// =============================================================================
// VISUAL EFFECTS MIXINS
// =============================================================================

// Glassmorphism effect
@mixin glassmorphism($blur: 10px, $opacity: 0.1) {
  backdrop-filter: blur($blur);
  background: rgba($color-white, $opacity);
  border: 1px solid rgba($color-marine-blue, 0.1);
}

// Gradient background
@mixin gradient($direction: to right, $color1: $color-marine-blue, $color2: $color-marine-blue-light) {
  background: linear-gradient($direction, $color1, $color2);
}

// Hover transition
@mixin hover-transition($property: all, $duration: $transition-base) {
  transition: $property $duration;

  &:hover {
    @content;
  }
}

// Focus styles
@mixin focus-ring($color: $color-marine-blue-400, $width: 2px) {
  &:focus {
    outline: none;
    box-shadow: 0 0 0 $width $color;
  }

  &:focus-visible {
    outline: none;
    box-shadow: 0 0 0 $width $color;
  }
}

// =============================================================================
// ANIMATION MIXINS
// =============================================================================

// Fade in animation
@mixin fade-in($duration: $transition-base) {
  opacity: 0;
  animation: fadeIn $duration ease-in-out forwards;

  @keyframes fadeIn {
    to {
      opacity: 1;
    }
  }
}

// Slide in from direction
@mixin slide-in($direction: up, $distance: 20px, $duration: $transition-base) {
  $translate-value: if($direction == 'up', translateY($distance), if($direction == 'down', translateY(-$distance), if($direction == 'left', translateX($distance), translateX(-$distance))));

  transform: $translate-value;
  opacity: 0;
  animation: slideIn $duration ease-out forwards;

  @keyframes slideIn {
    to {
      transform: translate(0, 0);
      opacity: 1;
    }
  }
}

// Scale animation
@mixin scale-in($scale: 0.8, $duration: $transition-base) {
  transform: scale($scale);
  opacity: 0;
  animation: scaleIn $duration ease-out forwards;

  @keyframes scaleIn {
    to {
      transform: scale(1);
      opacity: 1;
    }
  }
}

// =============================================================================
// FORM MIXINS
// =============================================================================

// Input styles
@mixin input-base {
  width: 100%;
  padding: $spacing-3 $spacing-4;
  border: $border-width-1 solid $color-gray-300;
  border-radius: $border-radius;
  font-size: $font-size-base;
  font-family: $font-family-primary;
  background-color: $color-white;
  color: $color-gray-900;
  transition: border-color $transition-fast, box-shadow $transition-fast;

  &:focus {
    @include focus-ring();
    border-color: $color-marine-blue;
  }

  &::placeholder {
    color: $color-gray-500;
  }

  &:disabled {
    background-color: $color-gray-100;
    cursor: not-allowed;
  }
}

// Button styles
@mixin button-base {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  padding: $spacing-3 $spacing-6;
  border: $border-width-1 solid transparent;
  border-radius: $border-radius;
  font-size: $font-size-base;
  font-weight: $font-weight-medium;
  font-family: $font-family-primary;
  text-decoration: none;
  cursor: pointer;
  transition: all $transition-fast;
  @include focus-ring();

  &:disabled {
    opacity: 0.6;
    cursor: not-allowed;
  }
}

@mixin button-primary {
  @include button-base();
  background-color: $color-marine-blue;
  color: $color-white;

  &:hover:not(:disabled) {
    background-color: $color-marine-blue-dark;
    transform: translateY(-1px);
    box-shadow: $shadow-md;
  }
}

@mixin button-secondary {
  @include button-base();
  background-color: transparent;
  color: $color-marine-blue;
  border-color: $color-marine-blue;

  &:hover:not(:disabled) {
    background-color: $color-marine-blue;
    color: $color-white;
  }
}

// =============================================================================
// LAYOUT MIXINS
// =============================================================================

// Container
@mixin container($max-width: $container-max-width) {
  width: 100%;
  max-width: $max-width;
  margin: 0 auto;
  padding-left: $spacing-4;
  padding-right: $spacing-4;

  @include tablet {
    padding-left: $spacing-6;
    padding-right: $spacing-6;
  }

  @include laptop {
    padding-left: $spacing-8;
    padding-right: $spacing-8;
  }
}

// Grid system
@mixin grid($columns: 12, $gap: $spacing-4) {
  display: grid;
  grid-template-columns: repeat($columns, 1fr);
  gap: $gap;
}

// Flex utilities
@mixin flex-column {
  display: flex;
  flex-direction: column;
}

@mixin flex-row {
  display: flex;
  flex-direction: row;
}

@mixin flex-center {
  @include center();
}

@mixin flex-between {
  display: flex;
  align-items: center;
  justify-content: space-between;
}

@mixin flex-around {
  display: flex;
  align-items: center;
  justify-content: space-around;
}

// =============================================================================
// ACCESSIBILITY MIXINS
// =============================================================================

// Screen reader only
@mixin sr-only {
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  margin: -1px;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  white-space: nowrap;
  border: 0;
}

// Skip link
@mixin skip-link {
  position: absolute;
  top: -40px;
  left: 6px;
  background: $color-marine-blue;
  color: $color-white;
  padding: 8px;
  text-decoration: none;
  border-radius: $border-radius;
  z-index: $z-index-50;

  &:focus {
    top: 6px;
  }
}

// High contrast mode support
@mixin high-contrast {
  @media (prefers-contrast: high) {
    @content;
  }
}

// Reduced motion support
@mixin reduced-motion {
  @media (prefers-reduced-motion: reduce) {
    @content;
  }
}